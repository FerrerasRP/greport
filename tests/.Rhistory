plot(s)
par(ask=TRUE)
plot(s)
args(plot.summaryM)
par(ask=FALSE)
plot.summaryM
?dotchart3
?dotchart
?summaryD
xless(summaryD)
s
unclass(s)
unname
f(d$sex)
tab <- table(d$sex)
unname(tab)
attributes(unname(tab))
as.numeric(unname(tab))
attributes(as.numeric(unname(tab)))
as.numeric(tab)
f(d$sex)
dim(d)
names(d)
d$sex
a
args(summaryD)
args(dotplot)
args(dotchart)
?dotplot
w
xless(w)
w
xless(w)
w[1,]
table(w$var)
table(w$vals)
require(latticeExtra)
library(lattice)
library(latticeExtra)

d <- expand.grid(f1 = as.factor(letters[1:8]),
            f2 = as.factor(LETTERS[1:3]),
            x  = 0:10)
d$y <- rnorm(nrow(d))
page <- factor((as.numeric(d$f1) - 1) %/% 5 + 1)
for(pg in levels(page)) {
  p <- xyplot(y ~ x|f1+f2, data = d[pg == page, ], cex = .5, pch = 16,
          layout = c(5, 3))
  print(useOuterStrips(p))
}
library(lattice)
d = expand.grid(f1 = as.factor(letters[1:10]),
            f2 = as.factor(LETTERS[1:3]),
            x  = 0:10)
d$y = rnorm(nrow(d))
xyplot(y~x|f1+f2,data=d,cex=0.5,pch=16,layout=c(5,3,2))
ltext(.5, .5, 'xx')
ltext(5, .2, 'yyyyyyyyy')
ltext(5, .1, 'yyyyyyyyy')
panel.dotplot
names(d)
f
warnings()
tr
reg
subset(d, treat==tr & region==reg)
m=subset(d, treat==tr & region==reg)
with(m, rbind(treat=tr, region=reg, f(sex), f(race))
)
with(m, rbind(f(sex), f(race))
)
w
h
xless(w)
Y
dim(Y)
xless(Y[[3]])
X
ux
j=1
i=1
n
i=1
ux
print(n)
j=rep(TRUE,n)
nX
for(k in 1:nX) j=j&(X[[k]] == ux[i,k])
j
X[j,]
ux
length(j)
table(j)
yx=Y[j,]
yx
dim(yx)
yx[[3]]
nY
yx[[1]]
k=3
y=yx[[k]]
y
inherits(y, 'yn')
class(y)
attributes(y)
attributes(y)
attributes(Y[[3]])
 yn <- function(..., label=deparse(substitute(...)), asna=c('unknown', 'unspecified')) {
    w <- list(...)
    k <- length(w)
    if(! k) stop('no variables to process')
    nam <- as.character(sys.call())[-1]
    nam <- nam[1 : k]
    lab <- nam
    W <- matrix(NA, nrow=length(w[[1]]), ncol=k, dimnames=list(NULL, nam))
    for(j in 1:k) {
      x <- w[[j]]
      na <- is.na(x)
      la <- label(x)
      if(la != '') lab[j] <- la
      if(is.numeric(x) && all(x %in% 0 : 1)) x <- x == 1
      if(! is.logical(x)) {
        x <- tolower(as.character(x))
        if(length(asna)) {
          i <- x %in% asna   ## need to do for regular variables too?
          if(any(i)) na[i] <- TRUE
        }
        x <- x %in% c('y', 'yes', 'present')
        if(any(na)) x[na] <- NA
      }
      W[, j] <- x
    }
    structure(W, label=label, labels=lab, class='yn')
  }
z=with(d, yn(x1, x2, x3, x4, x5, x6, x7, label='Exclusions'))
z
z <- data.frame(z, x=runif(100))
 as.data.frame.yn <- as.data.frame.matrix
 
z <- data.frame(z, x=runif(100))
z
z[[1]]
dim(z)
  as.data.frame.yn <- as.data.frame.vector

z=with(d, yn(x1, x2, x3, x4, x5, x6, x7, label='Exclusions'))
z <- data.frame(z, x=runif(100))
dim(z)
z
z=with(d, yn(x1, x2, x3, x4, x5, x6, x7, label='Exclusions'))
z=with(d, yn(x1, x2, x3, x4, x5, x6, x7, label='Exclusions'))
x <- list(a=z, b=runif(100))

x
length(x)
class(x)
as.data.frame(x)
rm(as.data.frame.yn)
as.data.frame(x)
x
x
class(x)
attributes(data.frame(x=1:2))
attributes(x)
colnames(x)
x$b
x$a
dim(a$a)
dim(x$a)
yn <- function(..., label=deparse(substitute(...)), asna=c('unknown', 'unspecified')) {
    w <- list(...)
    k <- length(w)
    if(! k) stop('no variables to process')
    nam <- as.character(sys.call())[-1]
    nam <- nam[1 : k]
    lab <- nam
    W <- matrix(NA, nrow=length(w[[1]]), ncol=k, dimnames=list(NULL, nam))
    for(j in 1:k) {
      x <- w[[j]]
      na <- is.na(x)
      la <- label(x)
      if(la != '') lab[j] <- la
      if(is.numeric(x) && all(x %in% 0 : 1)) x <- x == 1
      if(! is.logical(x)) {
        x <- tolower(as.character(x))
        if(length(asna)) {
          i <- x %in% asna   ## need to do for regular variables too?
          if(any(i)) na[i] <- TRUE
        }
        x <- x %in% c('y', 'yes', 'present')
        if(any(na)) x[na] <- NA
      }
      W[, j] <- x
    }
    structure(W, label=label, labels=lab, class=c('matrix', 'yn'))
  }
class(z)
z[1:10,]
attributes(z[1:10,])
dim(x)
?data.frame
  yn <- function(..., label=deparse(substitute(...)), asna=c('unknown', 'unspecified')) {
    w <- list(...)
    k <- length(w)
    if(! k) stop('no variables to process')
    nam <- as.character(sys.call())[-1]
    nam <- nam[1 : k]
    lab <- nam
    W <- matrix(NA, nrow=length(w[[1]]), ncol=k, dimnames=list(NULL, nam))
    for(j in 1:k) {
      x <- w[[j]]
      na <- is.na(x)
      la <- label(x)
      if(la != '') lab[j] <- la
      if(is.numeric(x) && all(x %in% 0 : 1)) x <- x == 1
      if(! is.logical(x)) {
        x <- tolower(as.character(x))
        if(length(asna)) {
          i <- x %in% asna   ## need to do for regular variables too?
          if(any(i)) na[i] <- TRUE
        }
        x <- x %in% c('y', 'yes', 'present')
        if(any(na)) x[na] <- NA
      }
      W[, j] <- x
    }
    structure(W, label=label, labels=lab, class=c('model.matrix', 'yn'))
  }
class(z)
dim(x)
z
zx[[1]]
zx[[2]]
zx[1:5,]
zx[1:5,1]
attributes(zx[1:5,1])
xless(dotplot)
xless(dotchart)
require(lattice)
xless(dotplot)
dotplot
dotplot.formula
search()
objects(8)
lattice::dotplot
lattice:::dotplot.formula
bwplot
lattice:::bwplot.formula
xless(lattice:::bwplot.formula)
formula
as.character(formula)
cf
cf[length(cf)]
names(d)
as.character(y ~ x1 + x2)
as.character(y ~ x1 + x2 | x3)
dev.off()
eval(parse(text='3'))
xless(panel.dotplot)
?xyplot
warnings()
?dotplot
ordered
reorder
?reorder
names(z)
table(z$val)
xless(z)
z$val <- reorder(z$val, z$freq)
levels(z$val)
table(d$sex)
dev.off()
?reorder
?reorder
q()
require(Hmisc)
show.pch()
traceback()
dim(d)
q()
q()
?model.frame
dim(y)
names(y)
attributes(y[[3]])
inherits(y[[3]], 'yn')
attributes(y)
attributes(y[[3]])
inherits(y[[3]], 'yn')
class(Y[[3]])
class(Y[,3])
class(Y[1:2,3])
methods('yn')
get('[.yn')
  '[.yn' <- function(x, ...) {
    at <- attributes(x)[c('class', 'label', 'labels')]
    x <- NextMethod('[')
    attributes(x) <- c(attributes(x), at)
    prn(attributes(x))
    x
  }

class(Y[1:2,])
class(Y[1:2,3])
class(Y)
dim(Y)
class(Y[[3]])
class(Y[1:3,3])
class(Y[,3])
class(Y[1:4,3])
class(Y[1:4,2:3])
class(Y[1:4,3,drop=FALSE])
class(Y[1:4,])
class(Y[1:4,])[[3]]
dim(Y[1:4,])
class(Y[1:4,])
y4=Y[1:4,]
sapply(y4, class)
attributes(y4[[3]])
y4=Y[1:4,,drop=FALSE]
attributes(y4[[3]])
class(Y)
class(Y[[3]])
as.data.frame.yn
class(Y[[3]])
y4=Y[1:4,,drop=FALSE]
attributes(y4[[3]])
y4=Y[1:4,,drop=FALSE]
attributes(y4[[3]])
with(NULL, x)
x=3
with(NULL, x)
require(rms)
get('[.rms')
get('[.rcs')
rms:::`[.rms`
'[.yn' <- function(x, ...) {
    cat('xxxxxxxxxxxxxxxxxxxxxxx')
    at <- attributes(x)[c('class', 'label', 'labels')]
    x <- NextMethod('[')
    attributes(x) <- c(attributes(x), at)
    prn(attributes(x))
    x
  }
  
y4=Y[1:4,,drop=FALSE]
attributes(y4[[3]])
class(Y)
as.data.frame.yn
0
q()
z
dev.off()
system('rm /tmp/z')
trellis.par.get()
trellis.par.get('plot.symbol')
names(trellis.par.get())
trellis.par.get('dot.symbol')
?text
q()
traceback()
f <- ~ e1 + e2
formula <- Formula(f)
mf <- model.frame(formula, data=d)
model.part(formula, data=mf, lhs=1)
mp=model.part(formula, data=mf, lhs=1)
nrow(mp)
ncol(mp)
mp[1:10,]
names(mp)
traceback()
dim(d)
getgreportOption('denom')
cadd
marg
cadd
marg[cadd]
marg=marg[cadd]
marg
excl=names(marg)
excl
levels(excl)
excl
?xyplot
?xyplot
?grid.key
xless(dotplot)
xless(lattice:::dotplot.formula)
prepanel.default.dotplot
lattice:::prepanel.default.dotplot
xless(panel.dotplot)
xless(lattice:::dotplot.formula)
lattice.getOption("prepanel.default.dotplot")
xless(prepanel.default.bwplot)
show.pch()
panel.superpose
warnings()
show.pch()
sink('/tmp/z.pdf')
dev.off()
pdf('/tmp/z.pdf')
dev.off()
source('~/R/greport/R/Misc.r')
?xyplot
require(rms)
example(plot.Predict)
q()
require(greport)
source('~/R/Hmisc/R/nobsY.s')
options(warning=2)
options(warn=2)
traceback()
hh
length(hh)
length(excl)
length(excl2)
length(hh)
length(x)
length(fracremain)
n
.2*n
source('~/R/greport/R/Misc.r')
pdf('/tmp/z.pdf')
dev.off()
pdf('/tmp/z.pdf')
dev.off()
m=217
cumex=c(5, 18, 31, 44, 80, 120, 180)
)
par('usr')
?par
cumex
nexclude <- 1:7
el <- c(e1='Prior MI', e2='History of Asthma',
              e3='History of Upper GI Bleeding',
              e4='No Significant CAD', e5='Inadequate Renal Function',
              e6='Pneumonia within 6 weeks', e7='Prior cardiac surgery')
}
cumex
nexclude
?strwrap
show.pch()
dev.off()
show.pch()
show.pch()
dev.off()
setwd('~/data/clinic/fecteau/')
k[1:10,]
describe(k)
names(k)
n
dim(k)
dim(a)
n <- with(a, tapply(cort, idenf, function(x) sum(! is.na(x))))
table(n)
table(rand)
xless(a)
ids
rand[1:10]
length(rand)
dim(a)
table(a$idenf, rand)
a$rand <- NULL
table(a$Week)
levels(a$Week)
table(a$Week)
table(a$w)
args(curveRep)
with(a, table(idenf, Week))
with(k, table(idenf, Week))
names(k)
comb
dim(k)
dim(a)
traceback()
args(curveRep)
describe(a)
dim(a)
dim(a)
describe(a)
plot(a$Week, w)
q()
getgreportOption('tablelink')
getwd()
setwd('/tmp')
getgreportOption('tablelink')
require(knitr)
knit('test.Rnw')
xless(putFig)
knit('test.Rnw')
source('~/R/greport/R/dReport.r')
source('~/R/greport/R/dReport.r')
knit('test.Rnw')
source('~/R/greport/R/Misc.r')
q()
source('~/R/greport/R/dReport.r')
require(greport)
require(knitr)
knit('report.Rnw')
q()
